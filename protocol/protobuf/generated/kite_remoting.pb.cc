// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kite_remoting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "kite_remoting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* HeartBeat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeartBeat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConnAuthAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConnAuthAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageStoreAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageStoreAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeliverAck_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeliverAck_reflection_ = NULL;
const ::google::protobuf::Descriptor* TxACKPacket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TxACKPacket_reflection_ = NULL;
const ::google::protobuf::Descriptor* Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* Header_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Header_reflection_ = NULL;
const ::google::protobuf::Descriptor* BytesMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BytesMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_kite_5fremoting_2eproto() {
  protobuf_AddDesc_kite_5fremoting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "kite_remoting.proto");
  GOOGLE_CHECK(file != NULL);
  HeartBeat_descriptor_ = file->message_type(0);
  static const int HeartBeat_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, version_),
  };
  HeartBeat_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HeartBeat_descriptor_,
      HeartBeat::default_instance_,
      HeartBeat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _has_bits_[0]),
      -1,
      -1,
      sizeof(HeartBeat),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeartBeat, _internal_metadata_),
      -1);
  ConnMeta_descriptor_ = file->message_type(1);
  static const int ConnMeta_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMeta, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMeta, secretkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMeta, warmingupsec_),
  };
  ConnMeta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnMeta_descriptor_,
      ConnMeta::default_instance_,
      ConnMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMeta, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnMeta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnMeta, _internal_metadata_),
      -1);
  ConnAuthAck_descriptor_ = file->message_type(2);
  static const int ConnAuthAck_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnAuthAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnAuthAck, feedback_),
  };
  ConnAuthAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConnAuthAck_descriptor_,
      ConnAuthAck::default_instance_,
      ConnAuthAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnAuthAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConnAuthAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConnAuthAck, _internal_metadata_),
      -1);
  MessageStoreAck_descriptor_ = file->message_type(3);
  static const int MessageStoreAck_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStoreAck, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStoreAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStoreAck, feedback_),
  };
  MessageStoreAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageStoreAck_descriptor_,
      MessageStoreAck::default_instance_,
      MessageStoreAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStoreAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageStoreAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageStoreAck, _internal_metadata_),
      -1);
  DeliverAck_descriptor_ = file->message_type(4);
  static const int DeliverAck_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, feedback_),
  };
  DeliverAck_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeliverAck_descriptor_,
      DeliverAck::default_instance_,
      DeliverAck_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, _has_bits_[0]),
      -1,
      -1,
      sizeof(DeliverAck),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAck, _internal_metadata_),
      -1);
  TxACKPacket_descriptor_ = file->message_type(5);
  static const int TxACKPacket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxACKPacket, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxACKPacket, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxACKPacket, feedback_),
  };
  TxACKPacket_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TxACKPacket_descriptor_,
      TxACKPacket::default_instance_,
      TxACKPacket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxACKPacket, _has_bits_[0]),
      -1,
      -1,
      sizeof(TxACKPacket),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TxACKPacket, _internal_metadata_),
      -1);
  Entry_descriptor_ = file->message_type(6);
  static const int Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, value_),
  };
  Entry_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Entry_descriptor_,
      Entry::default_instance_,
      Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _has_bits_[0]),
      -1,
      -1,
      sizeof(Entry),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Entry, _internal_metadata_),
      -1);
  Header_descriptor_ = file->message_type(7);
  static const int Header_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, messageid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, expiredtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, deliverlimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, commit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, fly_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, properties_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, createtime_),
  };
  Header_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Header_descriptor_,
      Header::default_instance_,
      Header_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _has_bits_[0]),
      -1,
      -1,
      sizeof(Header),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Header, _internal_metadata_),
      -1);
  BytesMessage_descriptor_ = file->message_type(8);
  static const int BytesMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesMessage, body_),
  };
  BytesMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BytesMessage_descriptor_,
      BytesMessage::default_instance_,
      BytesMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(BytesMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BytesMessage, _internal_metadata_),
      -1);
  StringMessage_descriptor_ = file->message_type(9);
  static const int StringMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMessage, header_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMessage, body_),
  };
  StringMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StringMessage_descriptor_,
      StringMessage::default_instance_,
      StringMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(StringMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMessage, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_kite_5fremoting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HeartBeat_descriptor_, &HeartBeat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnMeta_descriptor_, &ConnMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConnAuthAck_descriptor_, &ConnAuthAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageStoreAck_descriptor_, &MessageStoreAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeliverAck_descriptor_, &DeliverAck::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TxACKPacket_descriptor_, &TxACKPacket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Entry_descriptor_, &Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Header_descriptor_, &Header::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BytesMessage_descriptor_, &BytesMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StringMessage_descriptor_, &StringMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_kite_5fremoting_2eproto() {
  delete HeartBeat::default_instance_;
  delete HeartBeat_reflection_;
  delete ConnMeta::default_instance_;
  delete ConnMeta_reflection_;
  delete ConnAuthAck::default_instance_;
  delete ConnAuthAck_reflection_;
  delete MessageStoreAck::default_instance_;
  delete MessageStoreAck_reflection_;
  delete DeliverAck::default_instance_;
  delete DeliverAck_reflection_;
  delete TxACKPacket::default_instance_;
  delete TxACKPacket_reflection_;
  delete Entry::default_instance_;
  delete Entry_reflection_;
  delete Header::default_instance_;
  delete Header_reflection_;
  delete BytesMessage::default_instance_;
  delete BytesMessage_reflection_;
  delete StringMessage::default_instance_;
  delete StringMessage_reflection_;
}

void protobuf_AddDesc_kite_5fremoting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023kite_remoting.proto\"\034\n\tHeartBeat\022\017\n\007ve"
    "rsion\030\001 \002(\003\"G\n\010ConnMeta\022\017\n\007groupId\030\001 \002(\t"
    "\022\021\n\tsecretKey\030\002 \002(\t\022\027\n\014warmingupSec\030\003 \001("
    "\005:\0010\"5\n\013ConnAuthAck\022\024\n\006status\030\001 \002(\010:\004tru"
    "e\022\020\n\010feedback\030\002 \002(\t\"L\n\017MessageStoreAck\022\021"
    "\n\tmessageId\030\001 \002(\t\022\024\n\006status\030\002 \002(\010:\004true\022"
    "\020\n\010feedback\030\003 \002(\t\"|\n\nDeliverAck\022\021\n\tmessa"
    "geId\030\001 \002(\t\022\r\n\005topic\030\002 \002(\t\022\023\n\013messageType"
    "\030\003 \002(\t\022\017\n\007groupId\030\004 \002(\t\022\024\n\006status\030\005 \002(\010:"
    "\004true\022\020\n\010feedback\030\006 \001(\t\"K\n\013TxACKPacket\022\027"
    "\n\006header\030\001 \002(\0132\007.Header\022\021\n\006status\030\002 \002(\005:"
    "\0010\022\020\n\010feedback\030\003 \002(\t\"#\n\005Entry\022\013\n\003key\030\001 \002"
    "(\t\022\r\n\005value\030\002 \002(\t\"\330\001\n\006Header\022\021\n\tmessageI"
    "d\030\001 \002(\t\022\r\n\005topic\030\002 \002(\t\022\023\n\013messageType\030\003 "
    "\002(\t\022\027\n\013expiredTime\030\004 \002(\003:\002-1\022\031\n\014deliverL"
    "imit\030\005 \002(\005:\003100\022\017\n\007groupId\030\006 \002(\t\022\016\n\006comm"
    "it\030\007 \002(\010\022\022\n\003fly\030\010 \002(\010:\005false\022\032\n\nproperti"
    "es\030\t \003(\0132\006.Entry\022\022\n\ncreateTime\030\n \001(\003\"5\n\014"
    "BytesMessage\022\027\n\006header\030\001 \002(\0132\007.Header\022\014\n"
    "\004body\030\002 \002(\014\"6\n\rStringMessage\022\027\n\006header\030\001"
    " \002(\0132\007.Header\022\014\n\004body\030\002 \002(\t", 827);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "kite_remoting.proto", &protobuf_RegisterTypes);
  HeartBeat::default_instance_ = new HeartBeat();
  ConnMeta::default_instance_ = new ConnMeta();
  ConnAuthAck::default_instance_ = new ConnAuthAck();
  MessageStoreAck::default_instance_ = new MessageStoreAck();
  DeliverAck::default_instance_ = new DeliverAck();
  TxACKPacket::default_instance_ = new TxACKPacket();
  Entry::default_instance_ = new Entry();
  Header::default_instance_ = new Header();
  BytesMessage::default_instance_ = new BytesMessage();
  StringMessage::default_instance_ = new StringMessage();
  HeartBeat::default_instance_->InitAsDefaultInstance();
  ConnMeta::default_instance_->InitAsDefaultInstance();
  ConnAuthAck::default_instance_->InitAsDefaultInstance();
  MessageStoreAck::default_instance_->InitAsDefaultInstance();
  DeliverAck::default_instance_->InitAsDefaultInstance();
  TxACKPacket::default_instance_->InitAsDefaultInstance();
  Entry::default_instance_->InitAsDefaultInstance();
  Header::default_instance_->InitAsDefaultInstance();
  BytesMessage::default_instance_->InitAsDefaultInstance();
  StringMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_kite_5fremoting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_kite_5fremoting_2eproto {
  StaticDescriptorInitializer_kite_5fremoting_2eproto() {
    protobuf_AddDesc_kite_5fremoting_2eproto();
  }
} static_descriptor_initializer_kite_5fremoting_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#ifndef _MSC_VER
const int HeartBeat::kVersionFieldNumber;
#endif  // !_MSC_VER

HeartBeat::HeartBeat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:HeartBeat)
}

void HeartBeat::InitAsDefaultInstance() {
}

HeartBeat::HeartBeat(const HeartBeat& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:HeartBeat)
}

void HeartBeat::SharedCtor() {
  _cached_size_ = 0;
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:HeartBeat)
  SharedDtor();
}

void HeartBeat::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeartBeat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeartBeat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeartBeat_descriptor_;
}

const HeartBeat& HeartBeat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

HeartBeat* HeartBeat::default_instance_ = NULL;

HeartBeat* HeartBeat::New(::google::protobuf::Arena* arena) const {
  HeartBeat* n = new HeartBeat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HeartBeat::Clear() {
  version_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HeartBeat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HeartBeat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 version = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HeartBeat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HeartBeat)
  return false;
#undef DO_
}

void HeartBeat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HeartBeat)
  // required int64 version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->version(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:HeartBeat)
}

::google::protobuf::uint8* HeartBeat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:HeartBeat)
  // required int64 version = 1;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->version(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HeartBeat)
  return target;
}

int HeartBeat::ByteSize() const {
  int total_size = 0;

  // required int64 version = 1;
  if (has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->version());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeartBeat::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HeartBeat* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HeartBeat>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HeartBeat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HeartBeat::Swap(HeartBeat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HeartBeat::InternalSwap(HeartBeat* other) {
  std::swap(version_, other->version_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HeartBeat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeartBeat_descriptor_;
  metadata.reflection = HeartBeat_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HeartBeat

// required int64 version = 1;
bool HeartBeat::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HeartBeat::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
void HeartBeat::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
void HeartBeat::clear_version() {
  version_ = GOOGLE_LONGLONG(0);
  clear_has_version();
}
 ::google::protobuf::int64 HeartBeat::version() const {
  // @@protoc_insertion_point(field_get:HeartBeat.version)
  return version_;
}
 void HeartBeat::set_version(::google::protobuf::int64 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:HeartBeat.version)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ConnMeta::kGroupIdFieldNumber;
const int ConnMeta::kSecretKeyFieldNumber;
const int ConnMeta::kWarmingupSecFieldNumber;
#endif  // !_MSC_VER

ConnMeta::ConnMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnMeta)
}

void ConnMeta::InitAsDefaultInstance() {
}

ConnMeta::ConnMeta(const ConnMeta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnMeta)
}

void ConnMeta::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warmingupsec_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnMeta::~ConnMeta() {
  // @@protoc_insertion_point(destructor:ConnMeta)
  SharedDtor();
}

void ConnMeta::SharedDtor() {
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secretkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnMeta_descriptor_;
}

const ConnMeta& ConnMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

ConnMeta* ConnMeta::default_instance_ = NULL;

ConnMeta* ConnMeta::New(::google::protobuf::Arena* arena) const {
  ConnMeta* n = new ConnMeta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnMeta::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_groupid()) {
      groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_secretkey()) {
      secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    warmingupsec_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnMeta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string groupId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnMeta.groupId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_secretKey;
        break;
      }

      // required string secretKey = 2;
      case 2: {
        if (tag == 18) {
         parse_secretKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_secretkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->secretkey().data(), this->secretkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnMeta.secretKey");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_warmingupSec;
        break;
      }

      // optional int32 warmingupSec = 3 [default = 0];
      case 3: {
        if (tag == 24) {
         parse_warmingupSec:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warmingupsec_)));
          set_has_warmingupsec();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnMeta)
  return false;
#undef DO_
}

void ConnMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnMeta)
  // required string groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnMeta.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->groupid(), output);
  }

  // required string secretKey = 2;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnMeta.secretKey");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->secretkey(), output);
  }

  // optional int32 warmingupSec = 3 [default = 0];
  if (has_warmingupsec()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->warmingupsec(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnMeta)
}

::google::protobuf::uint8* ConnMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnMeta)
  // required string groupId = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnMeta.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->groupid(), target);
  }

  // required string secretKey = 2;
  if (has_secretkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->secretkey().data(), this->secretkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnMeta.secretKey");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->secretkey(), target);
  }

  // optional int32 warmingupSec = 3 [default = 0];
  if (has_warmingupsec()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->warmingupsec(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnMeta)
  return target;
}

int ConnMeta::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_groupid()) {
    // required string groupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_secretkey()) {
    // required string secretKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secretkey());
  }

  return total_size;
}
int ConnMeta::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string groupId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required string secretKey = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->secretkey());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 warmingupSec = 3 [default = 0];
  if (has_warmingupsec()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->warmingupsec());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnMeta::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnMeta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnMeta>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnMeta::MergeFrom(const ConnMeta& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (from.has_secretkey()) {
      set_has_secretkey();
      secretkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secretkey_);
    }
    if (from.has_warmingupsec()) {
      set_warmingupsec(from.warmingupsec());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnMeta::CopyFrom(const ConnMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnMeta::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnMeta::Swap(ConnMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnMeta::InternalSwap(ConnMeta* other) {
  groupid_.Swap(&other->groupid_);
  secretkey_.Swap(&other->secretkey_);
  std::swap(warmingupsec_, other->warmingupsec_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnMeta_descriptor_;
  metadata.reflection = ConnMeta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnMeta

// required string groupId = 1;
bool ConnMeta::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnMeta::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnMeta::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnMeta::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
 const ::std::string& ConnMeta::groupid() const {
  // @@protoc_insertion_point(field_get:ConnMeta.groupId)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMeta::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnMeta.groupId)
}
 void ConnMeta::set_groupid(const char* value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnMeta.groupId)
}
 void ConnMeta::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnMeta.groupId)
}
 ::std::string* ConnMeta::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:ConnMeta.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnMeta::release_groupid() {
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMeta::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:ConnMeta.groupId)
}

// required string secretKey = 2;
bool ConnMeta::has_secretkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnMeta::set_has_secretkey() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnMeta::clear_has_secretkey() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnMeta::clear_secretkey() {
  secretkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_secretkey();
}
 const ::std::string& ConnMeta::secretkey() const {
  // @@protoc_insertion_point(field_get:ConnMeta.secretKey)
  return secretkey_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMeta::set_secretkey(const ::std::string& value) {
  set_has_secretkey();
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnMeta.secretKey)
}
 void ConnMeta::set_secretkey(const char* value) {
  set_has_secretkey();
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnMeta.secretKey)
}
 void ConnMeta::set_secretkey(const char* value, size_t size) {
  set_has_secretkey();
  secretkey_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnMeta.secretKey)
}
 ::std::string* ConnMeta::mutable_secretkey() {
  set_has_secretkey();
  // @@protoc_insertion_point(field_mutable:ConnMeta.secretKey)
  return secretkey_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnMeta::release_secretkey() {
  clear_has_secretkey();
  return secretkey_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnMeta::set_allocated_secretkey(::std::string* secretkey) {
  if (secretkey != NULL) {
    set_has_secretkey();
  } else {
    clear_has_secretkey();
  }
  secretkey_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secretkey);
  // @@protoc_insertion_point(field_set_allocated:ConnMeta.secretKey)
}

// optional int32 warmingupSec = 3 [default = 0];
bool ConnMeta::has_warmingupsec() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConnMeta::set_has_warmingupsec() {
  _has_bits_[0] |= 0x00000004u;
}
void ConnMeta::clear_has_warmingupsec() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConnMeta::clear_warmingupsec() {
  warmingupsec_ = 0;
  clear_has_warmingupsec();
}
 ::google::protobuf::int32 ConnMeta::warmingupsec() const {
  // @@protoc_insertion_point(field_get:ConnMeta.warmingupSec)
  return warmingupsec_;
}
 void ConnMeta::set_warmingupsec(::google::protobuf::int32 value) {
  set_has_warmingupsec();
  warmingupsec_ = value;
  // @@protoc_insertion_point(field_set:ConnMeta.warmingupSec)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int ConnAuthAck::kStatusFieldNumber;
const int ConnAuthAck::kFeedbackFieldNumber;
#endif  // !_MSC_VER

ConnAuthAck::ConnAuthAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ConnAuthAck)
}

void ConnAuthAck::InitAsDefaultInstance() {
}

ConnAuthAck::ConnAuthAck(const ConnAuthAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ConnAuthAck)
}

void ConnAuthAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  status_ = true;
  feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConnAuthAck::~ConnAuthAck() {
  // @@protoc_insertion_point(destructor:ConnAuthAck)
  SharedDtor();
}

void ConnAuthAck::SharedDtor() {
  feedback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ConnAuthAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConnAuthAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConnAuthAck_descriptor_;
}

const ConnAuthAck& ConnAuthAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

ConnAuthAck* ConnAuthAck::default_instance_ = NULL;

ConnAuthAck* ConnAuthAck::New(::google::protobuf::Arena* arena) const {
  ConnAuthAck* n = new ConnAuthAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnAuthAck::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    status_ = true;
    if (has_feedback()) {
      feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConnAuthAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ConnAuthAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool status = 1 [default = true];
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_feedback;
        break;
      }

      // required string feedback = 2;
      case 2: {
        if (tag == 18) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ConnAuthAck.feedback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ConnAuthAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ConnAuthAck)
  return false;
#undef DO_
}

void ConnAuthAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ConnAuthAck)
  // required bool status = 1 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->status(), output);
  }

  // required string feedback = 2;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnAuthAck.feedback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ConnAuthAck)
}

::google::protobuf::uint8* ConnAuthAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ConnAuthAck)
  // required bool status = 1 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->status(), target);
  }

  // required string feedback = 2;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ConnAuthAck.feedback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ConnAuthAck)
  return target;
}

int ConnAuthAck::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_status()) {
    // required bool status = 1 [default = true];
    total_size += 1 + 1;
  }

  if (has_feedback()) {
    // required string feedback = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());
  }

  return total_size;
}
int ConnAuthAck::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bool status = 1 [default = true];
    total_size += 1 + 1;

    // required string feedback = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnAuthAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const ConnAuthAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConnAuthAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConnAuthAck::MergeFrom(const ConnAuthAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_feedback()) {
      set_has_feedback();
      feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConnAuthAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConnAuthAck::CopyFrom(const ConnAuthAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnAuthAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ConnAuthAck::Swap(ConnAuthAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnAuthAck::InternalSwap(ConnAuthAck* other) {
  std::swap(status_, other->status_);
  feedback_.Swap(&other->feedback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConnAuthAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConnAuthAck_descriptor_;
  metadata.reflection = ConnAuthAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnAuthAck

// required bool status = 1 [default = true];
bool ConnAuthAck::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConnAuthAck::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
void ConnAuthAck::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConnAuthAck::clear_status() {
  status_ = true;
  clear_has_status();
}
 bool ConnAuthAck::status() const {
  // @@protoc_insertion_point(field_get:ConnAuthAck.status)
  return status_;
}
 void ConnAuthAck::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:ConnAuthAck.status)
}

// required string feedback = 2;
bool ConnAuthAck::has_feedback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConnAuthAck::set_has_feedback() {
  _has_bits_[0] |= 0x00000002u;
}
void ConnAuthAck::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConnAuthAck::clear_feedback() {
  feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feedback();
}
 const ::std::string& ConnAuthAck::feedback() const {
  // @@protoc_insertion_point(field_get:ConnAuthAck.feedback)
  return feedback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnAuthAck::set_feedback(const ::std::string& value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ConnAuthAck.feedback)
}
 void ConnAuthAck::set_feedback(const char* value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ConnAuthAck.feedback)
}
 void ConnAuthAck::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ConnAuthAck.feedback)
}
 ::std::string* ConnAuthAck::mutable_feedback() {
  set_has_feedback();
  // @@protoc_insertion_point(field_mutable:ConnAuthAck.feedback)
  return feedback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ConnAuthAck::release_feedback() {
  clear_has_feedback();
  return feedback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ConnAuthAck::set_allocated_feedback(::std::string* feedback) {
  if (feedback != NULL) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  feedback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback);
  // @@protoc_insertion_point(field_set_allocated:ConnAuthAck.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int MessageStoreAck::kMessageIdFieldNumber;
const int MessageStoreAck::kStatusFieldNumber;
const int MessageStoreAck::kFeedbackFieldNumber;
#endif  // !_MSC_VER

MessageStoreAck::MessageStoreAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageStoreAck)
}

void MessageStoreAck::InitAsDefaultInstance() {
}

MessageStoreAck::MessageStoreAck(const MessageStoreAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageStoreAck)
}

void MessageStoreAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = true;
  feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageStoreAck::~MessageStoreAck() {
  // @@protoc_insertion_point(destructor:MessageStoreAck)
  SharedDtor();
}

void MessageStoreAck::SharedDtor() {
  messageid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageStoreAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageStoreAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageStoreAck_descriptor_;
}

const MessageStoreAck& MessageStoreAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

MessageStoreAck* MessageStoreAck::default_instance_ = NULL;

MessageStoreAck* MessageStoreAck::New(::google::protobuf::Arena* arena) const {
  MessageStoreAck* n = new MessageStoreAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageStoreAck::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_messageid()) {
      messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = true;
    if (has_feedback()) {
      feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageStoreAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageStoreAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageStoreAck.messageId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required bool status = 2 [default = true];
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_feedback;
        break;
      }

      // required string feedback = 3;
      case 3: {
        if (tag == 26) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "MessageStoreAck.feedback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageStoreAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageStoreAck)
  return false;
#undef DO_
}

void MessageStoreAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageStoreAck)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageStoreAck.messageId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messageid(), output);
  }

  // required bool status = 2 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->status(), output);
  }

  // required string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageStoreAck.feedback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageStoreAck)
}

::google::protobuf::uint8* MessageStoreAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageStoreAck)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageStoreAck.messageId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }

  // required bool status = 2 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->status(), target);
  }

  // required string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "MessageStoreAck.feedback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageStoreAck)
  return target;
}

int MessageStoreAck::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messageid()) {
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());
  }

  if (has_status()) {
    // required bool status = 2 [default = true];
    total_size += 1 + 1;
  }

  if (has_feedback()) {
    // required string feedback = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());
  }

  return total_size;
}
int MessageStoreAck::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());

    // required bool status = 2 [default = true];
    total_size += 1 + 1;

    // required string feedback = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageStoreAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageStoreAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageStoreAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageStoreAck::MergeFrom(const MessageStoreAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_has_messageid();
      messageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messageid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_feedback()) {
      set_has_feedback();
      feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageStoreAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStoreAck::CopyFrom(const MessageStoreAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStoreAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void MessageStoreAck::Swap(MessageStoreAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageStoreAck::InternalSwap(MessageStoreAck* other) {
  messageid_.Swap(&other->messageid_);
  std::swap(status_, other->status_);
  feedback_.Swap(&other->feedback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageStoreAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageStoreAck_descriptor_;
  metadata.reflection = MessageStoreAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageStoreAck

// required string messageId = 1;
bool MessageStoreAck::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageStoreAck::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageStoreAck::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageStoreAck::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messageid();
}
 const ::std::string& MessageStoreAck::messageid() const {
  // @@protoc_insertion_point(field_get:MessageStoreAck.messageId)
  return messageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageStoreAck::set_messageid(const ::std::string& value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageStoreAck.messageId)
}
 void MessageStoreAck::set_messageid(const char* value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageStoreAck.messageId)
}
 void MessageStoreAck::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageStoreAck.messageId)
}
 ::std::string* MessageStoreAck::mutable_messageid() {
  set_has_messageid();
  // @@protoc_insertion_point(field_mutable:MessageStoreAck.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageStoreAck::release_messageid() {
  clear_has_messageid();
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageStoreAck::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    set_has_messageid();
  } else {
    clear_has_messageid();
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:MessageStoreAck.messageId)
}

// required bool status = 2 [default = true];
bool MessageStoreAck::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MessageStoreAck::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void MessageStoreAck::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void MessageStoreAck::clear_status() {
  status_ = true;
  clear_has_status();
}
 bool MessageStoreAck::status() const {
  // @@protoc_insertion_point(field_get:MessageStoreAck.status)
  return status_;
}
 void MessageStoreAck::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:MessageStoreAck.status)
}

// required string feedback = 3;
bool MessageStoreAck::has_feedback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MessageStoreAck::set_has_feedback() {
  _has_bits_[0] |= 0x00000004u;
}
void MessageStoreAck::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000004u;
}
void MessageStoreAck::clear_feedback() {
  feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feedback();
}
 const ::std::string& MessageStoreAck::feedback() const {
  // @@protoc_insertion_point(field_get:MessageStoreAck.feedback)
  return feedback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageStoreAck::set_feedback(const ::std::string& value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:MessageStoreAck.feedback)
}
 void MessageStoreAck::set_feedback(const char* value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:MessageStoreAck.feedback)
}
 void MessageStoreAck::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:MessageStoreAck.feedback)
}
 ::std::string* MessageStoreAck::mutable_feedback() {
  set_has_feedback();
  // @@protoc_insertion_point(field_mutable:MessageStoreAck.feedback)
  return feedback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageStoreAck::release_feedback() {
  clear_has_feedback();
  return feedback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageStoreAck::set_allocated_feedback(::std::string* feedback) {
  if (feedback != NULL) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  feedback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback);
  // @@protoc_insertion_point(field_set_allocated:MessageStoreAck.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int DeliverAck::kMessageIdFieldNumber;
const int DeliverAck::kTopicFieldNumber;
const int DeliverAck::kMessageTypeFieldNumber;
const int DeliverAck::kGroupIdFieldNumber;
const int DeliverAck::kStatusFieldNumber;
const int DeliverAck::kFeedbackFieldNumber;
#endif  // !_MSC_VER

DeliverAck::DeliverAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DeliverAck)
}

void DeliverAck::InitAsDefaultInstance() {
}

DeliverAck::DeliverAck(const DeliverAck& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:DeliverAck)
}

void DeliverAck::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = true;
  feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverAck::~DeliverAck() {
  // @@protoc_insertion_point(destructor:DeliverAck)
  SharedDtor();
}

void DeliverAck::SharedDtor() {
  messageid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  feedback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void DeliverAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeliverAck::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverAck_descriptor_;
}

const DeliverAck& DeliverAck::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

DeliverAck* DeliverAck::default_instance_ = NULL;

DeliverAck* DeliverAck::New(::google::protobuf::Arena* arena) const {
  DeliverAck* n = new DeliverAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeliverAck::Clear() {
  if (_has_bits_[0 / 32] & 63u) {
    if (has_messageid()) {
      messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_messagetype()) {
      messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_groupid()) {
      groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    status_ = true;
    if (has_feedback()) {
      feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DeliverAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DeliverAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeliverAck.messageId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // required string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeliverAck.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messageType;
        break;
      }

      // required string messageType = 3;
      case 3: {
        if (tag == 26) {
         parse_messageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetype().data(), this->messagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeliverAck.messageType");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_groupId;
        break;
      }

      // required string groupId = 4;
      case 4: {
        if (tag == 34) {
         parse_groupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeliverAck.groupId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // required bool status = 5 [default = true];
      case 5: {
        if (tag == 40) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_feedback;
        break;
      }

      // optional string feedback = 6;
      case 6: {
        if (tag == 50) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "DeliverAck.feedback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DeliverAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DeliverAck)
  return false;
#undef DO_
}

void DeliverAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DeliverAck)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.messageId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messageid(), output);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // required string messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.messageType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetype(), output);
  }

  // required string groupId = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->groupid(), output);
  }

  // required bool status = 5 [default = true];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->status(), output);
  }

  // optional string feedback = 6;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.feedback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DeliverAck)
}

::google::protobuf::uint8* DeliverAck::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DeliverAck)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.messageId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // required string messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.messageType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetype(), target);
  }

  // required string groupId = 4;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->groupid(), target);
  }

  // required bool status = 5 [default = true];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->status(), target);
  }

  // optional string feedback = 6;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "DeliverAck.feedback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DeliverAck)
  return target;
}

int DeliverAck::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messageid()) {
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());
  }

  if (has_topic()) {
    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_messagetype()) {
    // required string messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());
  }

  if (has_groupid()) {
    // required string groupId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_status()) {
    // required bool status = 5 [default = true];
    total_size += 1 + 1;
  }

  return total_size;
}
int DeliverAck::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());

    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required string messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());

    // required string groupId = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required bool status = 5 [default = true];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional string feedback = 6;
  if (has_feedback()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverAck::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DeliverAck* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeliverAck>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverAck::MergeFrom(const DeliverAck& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_has_messageid();
      messageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messageid_);
    }
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (from.has_messagetype()) {
      set_has_messagetype();
      messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
    }
    if (from.has_groupid()) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_feedback()) {
      set_has_feedback();
      feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DeliverAck::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverAck::CopyFrom(const DeliverAck& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverAck::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void DeliverAck::Swap(DeliverAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeliverAck::InternalSwap(DeliverAck* other) {
  messageid_.Swap(&other->messageid_);
  topic_.Swap(&other->topic_);
  messagetype_.Swap(&other->messagetype_);
  groupid_.Swap(&other->groupid_);
  std::swap(status_, other->status_);
  feedback_.Swap(&other->feedback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeliverAck::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeliverAck_descriptor_;
  metadata.reflection = DeliverAck_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeliverAck

// required string messageId = 1;
bool DeliverAck::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DeliverAck::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
void DeliverAck::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void DeliverAck::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messageid();
}
 const ::std::string& DeliverAck::messageid() const {
  // @@protoc_insertion_point(field_get:DeliverAck.messageId)
  return messageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_messageid(const ::std::string& value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeliverAck.messageId)
}
 void DeliverAck::set_messageid(const char* value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeliverAck.messageId)
}
 void DeliverAck::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeliverAck.messageId)
}
 ::std::string* DeliverAck::mutable_messageid() {
  set_has_messageid();
  // @@protoc_insertion_point(field_mutable:DeliverAck.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeliverAck::release_messageid() {
  clear_has_messageid();
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    set_has_messageid();
  } else {
    clear_has_messageid();
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:DeliverAck.messageId)
}

// required string topic = 2;
bool DeliverAck::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DeliverAck::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void DeliverAck::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void DeliverAck::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& DeliverAck::topic() const {
  // @@protoc_insertion_point(field_get:DeliverAck.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeliverAck.topic)
}
 void DeliverAck::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeliverAck.topic)
}
 void DeliverAck::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeliverAck.topic)
}
 ::std::string* DeliverAck::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:DeliverAck.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeliverAck::release_topic() {
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:DeliverAck.topic)
}

// required string messageType = 3;
bool DeliverAck::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DeliverAck::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
void DeliverAck::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void DeliverAck::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagetype();
}
 const ::std::string& DeliverAck::messagetype() const {
  // @@protoc_insertion_point(field_get:DeliverAck.messageType)
  return messagetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_messagetype(const ::std::string& value) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeliverAck.messageType)
}
 void DeliverAck::set_messagetype(const char* value) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeliverAck.messageType)
}
 void DeliverAck::set_messagetype(const char* value, size_t size) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeliverAck.messageType)
}
 ::std::string* DeliverAck::mutable_messagetype() {
  set_has_messagetype();
  // @@protoc_insertion_point(field_mutable:DeliverAck.messageType)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeliverAck::release_messagetype() {
  clear_has_messagetype();
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    set_has_messagetype();
  } else {
    clear_has_messagetype();
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:DeliverAck.messageType)
}

// required string groupId = 4;
bool DeliverAck::has_groupid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DeliverAck::set_has_groupid() {
  _has_bits_[0] |= 0x00000008u;
}
void DeliverAck::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000008u;
}
void DeliverAck::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
 const ::std::string& DeliverAck::groupid() const {
  // @@protoc_insertion_point(field_get:DeliverAck.groupId)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeliverAck.groupId)
}
 void DeliverAck::set_groupid(const char* value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeliverAck.groupId)
}
 void DeliverAck::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeliverAck.groupId)
}
 ::std::string* DeliverAck::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:DeliverAck.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeliverAck::release_groupid() {
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:DeliverAck.groupId)
}

// required bool status = 5 [default = true];
bool DeliverAck::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DeliverAck::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void DeliverAck::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void DeliverAck::clear_status() {
  status_ = true;
  clear_has_status();
}
 bool DeliverAck::status() const {
  // @@protoc_insertion_point(field_get:DeliverAck.status)
  return status_;
}
 void DeliverAck::set_status(bool value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:DeliverAck.status)
}

// optional string feedback = 6;
bool DeliverAck::has_feedback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DeliverAck::set_has_feedback() {
  _has_bits_[0] |= 0x00000020u;
}
void DeliverAck::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000020u;
}
void DeliverAck::clear_feedback() {
  feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feedback();
}
 const ::std::string& DeliverAck::feedback() const {
  // @@protoc_insertion_point(field_get:DeliverAck.feedback)
  return feedback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_feedback(const ::std::string& value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:DeliverAck.feedback)
}
 void DeliverAck::set_feedback(const char* value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:DeliverAck.feedback)
}
 void DeliverAck::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:DeliverAck.feedback)
}
 ::std::string* DeliverAck::mutable_feedback() {
  set_has_feedback();
  // @@protoc_insertion_point(field_mutable:DeliverAck.feedback)
  return feedback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DeliverAck::release_feedback() {
  clear_has_feedback();
  return feedback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DeliverAck::set_allocated_feedback(::std::string* feedback) {
  if (feedback != NULL) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  feedback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback);
  // @@protoc_insertion_point(field_set_allocated:DeliverAck.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int TxACKPacket::kHeaderFieldNumber;
const int TxACKPacket::kStatusFieldNumber;
const int TxACKPacket::kFeedbackFieldNumber;
#endif  // !_MSC_VER

TxACKPacket::TxACKPacket()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TxACKPacket)
}

void TxACKPacket::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
}

TxACKPacket::TxACKPacket(const TxACKPacket& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TxACKPacket)
}

void TxACKPacket::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  status_ = 0;
  feedback_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TxACKPacket::~TxACKPacket() {
  // @@protoc_insertion_point(destructor:TxACKPacket)
  SharedDtor();
}

void TxACKPacket::SharedDtor() {
  feedback_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void TxACKPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TxACKPacket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TxACKPacket_descriptor_;
}

const TxACKPacket& TxACKPacket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

TxACKPacket* TxACKPacket::default_instance_ = NULL;

TxACKPacket* TxACKPacket::New(::google::protobuf::Arena* arena) const {
  TxACKPacket* n = new TxACKPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TxACKPacket::Clear() {
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    status_ = 0;
    if (has_feedback()) {
      feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TxACKPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TxACKPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_feedback;
        break;
      }

      // required string feedback = 3;
      case 3: {
        if (tag == 26) {
         parse_feedback:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_feedback()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->feedback().data(), this->feedback().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "TxACKPacket.feedback");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TxACKPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TxACKPacket)
  return false;
#undef DO_
}

void TxACKPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TxACKPacket)
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required int32 status = 2 [default = 0];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // required string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TxACKPacket.feedback");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->feedback(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TxACKPacket)
}

::google::protobuf::uint8* TxACKPacket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TxACKPacket)
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // required int32 status = 2 [default = 0];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // required string feedback = 3;
  if (has_feedback()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->feedback().data(), this->feedback().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "TxACKPacket.feedback");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->feedback(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TxACKPacket)
  return target;
}

int TxACKPacket::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_header()) {
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_status()) {
    // required int32 status = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  if (has_feedback()) {
    // required string feedback = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());
  }

  return total_size;
}
int TxACKPacket::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required int32 status = 2 [default = 0];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());

    // required string feedback = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->feedback());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TxACKPacket::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TxACKPacket* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TxACKPacket>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TxACKPacket::MergeFrom(const TxACKPacket& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_feedback()) {
      set_has_feedback();
      feedback_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.feedback_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TxACKPacket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TxACKPacket::CopyFrom(const TxACKPacket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TxACKPacket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void TxACKPacket::Swap(TxACKPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TxACKPacket::InternalSwap(TxACKPacket* other) {
  std::swap(header_, other->header_);
  std::swap(status_, other->status_);
  feedback_.Swap(&other->feedback_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TxACKPacket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TxACKPacket_descriptor_;
  metadata.reflection = TxACKPacket_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TxACKPacket

// required .Header header = 1;
bool TxACKPacket::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TxACKPacket::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void TxACKPacket::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void TxACKPacket::clear_header() {
  if (header_ != NULL) header_->::Header::Clear();
  clear_has_header();
}
const ::Header& TxACKPacket::header() const {
  // @@protoc_insertion_point(field_get:TxACKPacket.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::Header* TxACKPacket::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::Header;
  }
  // @@protoc_insertion_point(field_mutable:TxACKPacket.header)
  return header_;
}
::Header* TxACKPacket::release_header() {
  clear_has_header();
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void TxACKPacket::set_allocated_header(::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:TxACKPacket.header)
}

// required int32 status = 2 [default = 0];
bool TxACKPacket::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TxACKPacket::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TxACKPacket::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TxACKPacket::clear_status() {
  status_ = 0;
  clear_has_status();
}
 ::google::protobuf::int32 TxACKPacket::status() const {
  // @@protoc_insertion_point(field_get:TxACKPacket.status)
  return status_;
}
 void TxACKPacket::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:TxACKPacket.status)
}

// required string feedback = 3;
bool TxACKPacket::has_feedback() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TxACKPacket::set_has_feedback() {
  _has_bits_[0] |= 0x00000004u;
}
void TxACKPacket::clear_has_feedback() {
  _has_bits_[0] &= ~0x00000004u;
}
void TxACKPacket::clear_feedback() {
  feedback_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_feedback();
}
 const ::std::string& TxACKPacket::feedback() const {
  // @@protoc_insertion_point(field_get:TxACKPacket.feedback)
  return feedback_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxACKPacket::set_feedback(const ::std::string& value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TxACKPacket.feedback)
}
 void TxACKPacket::set_feedback(const char* value) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TxACKPacket.feedback)
}
 void TxACKPacket::set_feedback(const char* value, size_t size) {
  set_has_feedback();
  feedback_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TxACKPacket.feedback)
}
 ::std::string* TxACKPacket::mutable_feedback() {
  set_has_feedback();
  // @@protoc_insertion_point(field_mutable:TxACKPacket.feedback)
  return feedback_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TxACKPacket::release_feedback() {
  clear_has_feedback();
  return feedback_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TxACKPacket::set_allocated_feedback(::std::string* feedback) {
  if (feedback != NULL) {
    set_has_feedback();
  } else {
    clear_has_feedback();
  }
  feedback_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), feedback);
  // @@protoc_insertion_point(field_set_allocated:TxACKPacket.feedback)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Entry::kKeyFieldNumber;
const int Entry::kValueFieldNumber;
#endif  // !_MSC_VER

Entry::Entry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Entry)
}

void Entry::InitAsDefaultInstance() {
}

Entry::Entry(const Entry& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Entry)
}

void Entry::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Entry::~Entry() {
  // @@protoc_insertion_point(destructor:Entry)
  SharedDtor();
}

void Entry::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Entry_descriptor_;
}

const Entry& Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

Entry* Entry::default_instance_ = NULL;

Entry* Entry::New(::google::protobuf::Arena* arena) const {
  Entry* n = new Entry;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Entry::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Entry)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Entry.key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Entry.value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Entry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Entry)
  return false;
#undef DO_
}

void Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Entry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Entry.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Entry.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Entry)
}

::google::protobuf::uint8* Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Entry)
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Entry.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Entry.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Entry)
  return target;
}

int Entry::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
int Entry::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Entry::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Entry* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Entry>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Entry::MergeFrom(const Entry& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Entry::CopyFrom(const Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Entry::Swap(Entry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Entry::InternalSwap(Entry* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Entry_descriptor_;
  metadata.reflection = Entry_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Entry

// required string key = 1;
bool Entry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Entry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Entry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Entry::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Entry::key() const {
  // @@protoc_insertion_point(field_get:Entry.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Entry.key)
}
 void Entry::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Entry.key)
}
 void Entry::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Entry.key)
}
 ::std::string* Entry::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:Entry.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_key() {
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Entry.key)
}

// required string value = 2;
bool Entry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Entry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Entry::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Entry::value() const {
  // @@protoc_insertion_point(field_get:Entry.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Entry.value)
}
 void Entry::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Entry.value)
}
 void Entry::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Entry.value)
}
 ::std::string* Entry::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:Entry.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Entry::release_value() {
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Entry::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:Entry.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int Header::kMessageIdFieldNumber;
const int Header::kTopicFieldNumber;
const int Header::kMessageTypeFieldNumber;
const int Header::kExpiredTimeFieldNumber;
const int Header::kDeliverLimitFieldNumber;
const int Header::kGroupIdFieldNumber;
const int Header::kCommitFieldNumber;
const int Header::kFlyFieldNumber;
const int Header::kPropertiesFieldNumber;
const int Header::kCreateTimeFieldNumber;
#endif  // !_MSC_VER

Header::Header()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Header)
}

void Header::InitAsDefaultInstance() {
}

Header::Header(const Header& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Header)
}

void Header::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  messageid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  expiredtime_ = GOOGLE_LONGLONG(-1);
  deliverlimit_ = 100;
  groupid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  commit_ = false;
  fly_ = false;
  createtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:Header)
  SharedDtor();
}

void Header::SharedDtor() {
  messageid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  messagetype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  groupid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Header::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Header::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Header_descriptor_;
}

const Header& Header::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

Header* Header::default_instance_ = NULL;

Header* Header::New(::google::protobuf::Arena* arena) const {
  Header* n = new Header;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Header::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Header*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(commit_, fly_);
    if (has_messageid()) {
      messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_topic()) {
      topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_messagetype()) {
      messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    expiredtime_ = GOOGLE_LONGLONG(-1);
    deliverlimit_ = 100;
    if (has_groupid()) {
      groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  createtime_ = GOOGLE_LONGLONG(0);

#undef ZR_HELPER_
#undef ZR_

  properties_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Header::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Header)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string messageId = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messageid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messageid().data(), this->messageid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.messageId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_topic;
        break;
      }

      // required string topic = 2;
      case 2: {
        if (tag == 18) {
         parse_topic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.topic");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_messageType;
        break;
      }

      // required string messageType = 3;
      case 3: {
        if (tag == 26) {
         parse_messageType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_messagetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->messagetype().data(), this->messagetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.messageType");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_expiredTime;
        break;
      }

      // required int64 expiredTime = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_expiredTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiredtime_)));
          set_has_expiredtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_deliverLimit;
        break;
      }

      // required int32 deliverLimit = 5 [default = 100];
      case 5: {
        if (tag == 40) {
         parse_deliverLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &deliverlimit_)));
          set_has_deliverlimit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_groupId;
        break;
      }

      // required string groupId = 6;
      case 6: {
        if (tag == 50) {
         parse_groupId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_groupid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->groupid().data(), this->groupid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Header.groupId");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_commit;
        break;
      }

      // required bool commit = 7;
      case 7: {
        if (tag == 56) {
         parse_commit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &commit_)));
          set_has_commit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_fly;
        break;
      }

      // required bool fly = 8 [default = false];
      case 8: {
        if (tag == 64) {
         parse_fly:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fly_)));
          set_has_fly();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_properties;
        break;
      }

      // repeated .Entry properties = 9;
      case 9: {
        if (tag == 74) {
         parse_properties:
          DO_(input->IncrementRecursionDepth());
         parse_loop_properties:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_properties()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_loop_properties;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(80)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 10;
      case 10: {
        if (tag == 80) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Header)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Header)
  return false;
#undef DO_
}

void Header::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Header)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.messageId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->messageid(), output);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->topic(), output);
  }

  // required string messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.messageType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->messagetype(), output);
  }

  // required int64 expiredTime = 4 [default = -1];
  if (has_expiredtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->expiredtime(), output);
  }

  // required int32 deliverLimit = 5 [default = 100];
  if (has_deliverlimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->deliverlimit(), output);
  }

  // required string groupId = 6;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.groupId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->groupid(), output);
  }

  // required bool commit = 7;
  if (has_commit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->commit(), output);
  }

  // required bool fly = 8 [default = false];
  if (has_fly()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fly(), output);
  }

  // repeated .Entry properties = 9;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->properties(i), output);
  }

  // optional int64 createTime = 10;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->createtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Header)
}

::google::protobuf::uint8* Header::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Header)
  // required string messageId = 1;
  if (has_messageid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messageid().data(), this->messageid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.messageId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->messageid(), target);
  }

  // required string topic = 2;
  if (has_topic()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->topic(), target);
  }

  // required string messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->messagetype().data(), this->messagetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.messageType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->messagetype(), target);
  }

  // required int64 expiredTime = 4 [default = -1];
  if (has_expiredtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->expiredtime(), target);
  }

  // required int32 deliverLimit = 5 [default = 100];
  if (has_deliverlimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->deliverlimit(), target);
  }

  // required string groupId = 6;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->groupid().data(), this->groupid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Header.groupId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->groupid(), target);
  }

  // required bool commit = 7;
  if (has_commit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->commit(), target);
  }

  // required bool fly = 8 [default = false];
  if (has_fly()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fly(), target);
  }

  // repeated .Entry properties = 9;
  for (unsigned int i = 0, n = this->properties_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->properties(i), target);
  }

  // optional int64 createTime = 10;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->createtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Header)
  return target;
}

int Header::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_messageid()) {
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());
  }

  if (has_topic()) {
    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  if (has_messagetype()) {
    // required string messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());
  }

  if (has_expiredtime()) {
    // required int64 expiredTime = 4 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiredtime());
  }

  if (has_deliverlimit()) {
    // required int32 deliverLimit = 5 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliverlimit());
  }

  if (has_groupid()) {
    // required string groupId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());
  }

  if (has_commit()) {
    // required bool commit = 7;
    total_size += 1 + 1;
  }

  if (has_fly()) {
    // required bool fly = 8 [default = false];
    total_size += 1 + 1;
  }

  return total_size;
}
int Header::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string messageId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messageid());

    // required string topic = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());

    // required string messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->messagetype());

    // required int64 expiredTime = 4 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiredtime());

    // required int32 deliverLimit = 5 [default = 100];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->deliverlimit());

    // required string groupId = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->groupid());

    // required bool commit = 7;
    total_size += 1 + 1;

    // required bool fly = 8 [default = false];
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int64 createTime = 10;
  if (has_createtime()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->createtime());
  }

  // repeated .Entry properties = 9;
  total_size += 1 * this->properties_size();
  for (int i = 0; i < this->properties_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->properties(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Header::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Header* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Header>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Header::MergeFrom(const Header& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  properties_.MergeFrom(from.properties_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_messageid()) {
      set_has_messageid();
      messageid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messageid_);
    }
    if (from.has_topic()) {
      set_has_topic();
      topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
    }
    if (from.has_messagetype()) {
      set_has_messagetype();
      messagetype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.messagetype_);
    }
    if (from.has_expiredtime()) {
      set_expiredtime(from.expiredtime());
    }
    if (from.has_deliverlimit()) {
      set_deliverlimit(from.deliverlimit());
    }
    if (from.has_groupid()) {
      set_has_groupid();
      groupid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.groupid_);
    }
    if (from.has_commit()) {
      set_commit(from.commit());
    }
    if (from.has_fly()) {
      set_fly(from.fly());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Header::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Header::CopyFrom(const Header& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->properties())) return false;
  return true;
}

void Header::Swap(Header* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Header::InternalSwap(Header* other) {
  messageid_.Swap(&other->messageid_);
  topic_.Swap(&other->topic_);
  messagetype_.Swap(&other->messagetype_);
  std::swap(expiredtime_, other->expiredtime_);
  std::swap(deliverlimit_, other->deliverlimit_);
  groupid_.Swap(&other->groupid_);
  std::swap(commit_, other->commit_);
  std::swap(fly_, other->fly_);
  properties_.UnsafeArenaSwap(&other->properties_);
  std::swap(createtime_, other->createtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Header::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Header_descriptor_;
  metadata.reflection = Header_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Header

// required string messageId = 1;
bool Header::has_messageid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Header::set_has_messageid() {
  _has_bits_[0] |= 0x00000001u;
}
void Header::clear_has_messageid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Header::clear_messageid() {
  messageid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messageid();
}
 const ::std::string& Header::messageid() const {
  // @@protoc_insertion_point(field_get:Header.messageId)
  return messageid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_messageid(const ::std::string& value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.messageId)
}
 void Header::set_messageid(const char* value) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.messageId)
}
 void Header::set_messageid(const char* value, size_t size) {
  set_has_messageid();
  messageid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.messageId)
}
 ::std::string* Header::mutable_messageid() {
  set_has_messageid();
  // @@protoc_insertion_point(field_mutable:Header.messageId)
  return messageid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_messageid() {
  clear_has_messageid();
  return messageid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_messageid(::std::string* messageid) {
  if (messageid != NULL) {
    set_has_messageid();
  } else {
    clear_has_messageid();
  }
  messageid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messageid);
  // @@protoc_insertion_point(field_set_allocated:Header.messageId)
}

// required string topic = 2;
bool Header::has_topic() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Header::set_has_topic() {
  _has_bits_[0] |= 0x00000002u;
}
void Header::clear_has_topic() {
  _has_bits_[0] &= ~0x00000002u;
}
void Header::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic();
}
 const ::std::string& Header::topic() const {
  // @@protoc_insertion_point(field_get:Header.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_topic(const ::std::string& value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.topic)
}
 void Header::set_topic(const char* value) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.topic)
}
 void Header::set_topic(const char* value, size_t size) {
  set_has_topic();
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.topic)
}
 ::std::string* Header::mutable_topic() {
  set_has_topic();
  // @@protoc_insertion_point(field_mutable:Header.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_topic() {
  clear_has_topic();
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    set_has_topic();
  } else {
    clear_has_topic();
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:Header.topic)
}

// required string messageType = 3;
bool Header::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Header::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
void Header::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void Header::clear_messagetype() {
  messagetype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_messagetype();
}
 const ::std::string& Header::messagetype() const {
  // @@protoc_insertion_point(field_get:Header.messageType)
  return messagetype_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_messagetype(const ::std::string& value) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.messageType)
}
 void Header::set_messagetype(const char* value) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.messageType)
}
 void Header::set_messagetype(const char* value, size_t size) {
  set_has_messagetype();
  messagetype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.messageType)
}
 ::std::string* Header::mutable_messagetype() {
  set_has_messagetype();
  // @@protoc_insertion_point(field_mutable:Header.messageType)
  return messagetype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_messagetype() {
  clear_has_messagetype();
  return messagetype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_messagetype(::std::string* messagetype) {
  if (messagetype != NULL) {
    set_has_messagetype();
  } else {
    clear_has_messagetype();
  }
  messagetype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), messagetype);
  // @@protoc_insertion_point(field_set_allocated:Header.messageType)
}

// required int64 expiredTime = 4 [default = -1];
bool Header::has_expiredtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Header::set_has_expiredtime() {
  _has_bits_[0] |= 0x00000008u;
}
void Header::clear_has_expiredtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void Header::clear_expiredtime() {
  expiredtime_ = GOOGLE_LONGLONG(-1);
  clear_has_expiredtime();
}
 ::google::protobuf::int64 Header::expiredtime() const {
  // @@protoc_insertion_point(field_get:Header.expiredTime)
  return expiredtime_;
}
 void Header::set_expiredtime(::google::protobuf::int64 value) {
  set_has_expiredtime();
  expiredtime_ = value;
  // @@protoc_insertion_point(field_set:Header.expiredTime)
}

// required int32 deliverLimit = 5 [default = 100];
bool Header::has_deliverlimit() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Header::set_has_deliverlimit() {
  _has_bits_[0] |= 0x00000010u;
}
void Header::clear_has_deliverlimit() {
  _has_bits_[0] &= ~0x00000010u;
}
void Header::clear_deliverlimit() {
  deliverlimit_ = 100;
  clear_has_deliverlimit();
}
 ::google::protobuf::int32 Header::deliverlimit() const {
  // @@protoc_insertion_point(field_get:Header.deliverLimit)
  return deliverlimit_;
}
 void Header::set_deliverlimit(::google::protobuf::int32 value) {
  set_has_deliverlimit();
  deliverlimit_ = value;
  // @@protoc_insertion_point(field_set:Header.deliverLimit)
}

// required string groupId = 6;
bool Header::has_groupid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Header::set_has_groupid() {
  _has_bits_[0] |= 0x00000020u;
}
void Header::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Header::clear_groupid() {
  groupid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_groupid();
}
 const ::std::string& Header::groupid() const {
  // @@protoc_insertion_point(field_get:Header.groupId)
  return groupid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_groupid(const ::std::string& value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Header.groupId)
}
 void Header::set_groupid(const char* value) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Header.groupId)
}
 void Header::set_groupid(const char* value, size_t size) {
  set_has_groupid();
  groupid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Header.groupId)
}
 ::std::string* Header::mutable_groupid() {
  set_has_groupid();
  // @@protoc_insertion_point(field_mutable:Header.groupId)
  return groupid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Header::release_groupid() {
  clear_has_groupid();
  return groupid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Header::set_allocated_groupid(::std::string* groupid) {
  if (groupid != NULL) {
    set_has_groupid();
  } else {
    clear_has_groupid();
  }
  groupid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), groupid);
  // @@protoc_insertion_point(field_set_allocated:Header.groupId)
}

// required bool commit = 7;
bool Header::has_commit() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Header::set_has_commit() {
  _has_bits_[0] |= 0x00000040u;
}
void Header::clear_has_commit() {
  _has_bits_[0] &= ~0x00000040u;
}
void Header::clear_commit() {
  commit_ = false;
  clear_has_commit();
}
 bool Header::commit() const {
  // @@protoc_insertion_point(field_get:Header.commit)
  return commit_;
}
 void Header::set_commit(bool value) {
  set_has_commit();
  commit_ = value;
  // @@protoc_insertion_point(field_set:Header.commit)
}

// required bool fly = 8 [default = false];
bool Header::has_fly() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Header::set_has_fly() {
  _has_bits_[0] |= 0x00000080u;
}
void Header::clear_has_fly() {
  _has_bits_[0] &= ~0x00000080u;
}
void Header::clear_fly() {
  fly_ = false;
  clear_has_fly();
}
 bool Header::fly() const {
  // @@protoc_insertion_point(field_get:Header.fly)
  return fly_;
}
 void Header::set_fly(bool value) {
  set_has_fly();
  fly_ = value;
  // @@protoc_insertion_point(field_set:Header.fly)
}

// repeated .Entry properties = 9;
int Header::properties_size() const {
  return properties_.size();
}
void Header::clear_properties() {
  properties_.Clear();
}
const ::Entry& Header::properties(int index) const {
  // @@protoc_insertion_point(field_get:Header.properties)
  return properties_.Get(index);
}
::Entry* Header::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:Header.properties)
  return properties_.Mutable(index);
}
::Entry* Header::add_properties() {
  // @@protoc_insertion_point(field_add:Header.properties)
  return properties_.Add();
}
::google::protobuf::RepeatedPtrField< ::Entry >*
Header::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:Header.properties)
  return &properties_;
}
const ::google::protobuf::RepeatedPtrField< ::Entry >&
Header::properties() const {
  // @@protoc_insertion_point(field_list:Header.properties)
  return properties_;
}

// optional int64 createTime = 10;
bool Header::has_createtime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Header::set_has_createtime() {
  _has_bits_[0] |= 0x00000200u;
}
void Header::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000200u;
}
void Header::clear_createtime() {
  createtime_ = GOOGLE_LONGLONG(0);
  clear_has_createtime();
}
 ::google::protobuf::int64 Header::createtime() const {
  // @@protoc_insertion_point(field_get:Header.createTime)
  return createtime_;
}
 void Header::set_createtime(::google::protobuf::int64 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:Header.createTime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int BytesMessage::kHeaderFieldNumber;
const int BytesMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

BytesMessage::BytesMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:BytesMessage)
}

void BytesMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
}

BytesMessage::BytesMessage(const BytesMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:BytesMessage)
}

void BytesMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BytesMessage::~BytesMessage() {
  // @@protoc_insertion_point(destructor:BytesMessage)
  SharedDtor();
}

void BytesMessage::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void BytesMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BytesMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BytesMessage_descriptor_;
}

const BytesMessage& BytesMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

BytesMessage* BytesMessage::default_instance_ = NULL;

BytesMessage* BytesMessage::New(::google::protobuf::Arena* arena) const {
  BytesMessage* n = new BytesMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BytesMessage::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    if (has_body()) {
      body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BytesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BytesMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required bytes body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_body()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BytesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BytesMessage)
  return false;
#undef DO_
}

void BytesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BytesMessage)
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required bytes body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BytesMessage)
}

::google::protobuf::uint8* BytesMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:BytesMessage)
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // required bytes body = 2;
  if (has_body()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BytesMessage)
  return target;
}

int BytesMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_header()) {
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_body()) {
    // required bytes body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());
  }

  return total_size;
}
int BytesMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required bytes body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BytesMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BytesMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BytesMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BytesMessage::MergeFrom(const BytesMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BytesMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BytesMessage::CopyFrom(const BytesMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BytesMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void BytesMessage::Swap(BytesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BytesMessage::InternalSwap(BytesMessage* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BytesMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BytesMessage_descriptor_;
  metadata.reflection = BytesMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BytesMessage

// required .Header header = 1;
bool BytesMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BytesMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void BytesMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void BytesMessage::clear_header() {
  if (header_ != NULL) header_->::Header::Clear();
  clear_has_header();
}
const ::Header& BytesMessage::header() const {
  // @@protoc_insertion_point(field_get:BytesMessage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::Header* BytesMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::Header;
  }
  // @@protoc_insertion_point(field_mutable:BytesMessage.header)
  return header_;
}
::Header* BytesMessage::release_header() {
  clear_has_header();
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void BytesMessage::set_allocated_header(::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:BytesMessage.header)
}

// required bytes body = 2;
bool BytesMessage::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BytesMessage::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void BytesMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void BytesMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
 const ::std::string& BytesMessage::body() const {
  // @@protoc_insertion_point(field_get:BytesMessage.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BytesMessage::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:BytesMessage.body)
}
 void BytesMessage::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:BytesMessage.body)
}
 void BytesMessage::set_body(const void* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:BytesMessage.body)
}
 ::std::string* BytesMessage::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:BytesMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BytesMessage::release_body() {
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BytesMessage::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:BytesMessage.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#ifndef _MSC_VER
const int StringMessage::kHeaderFieldNumber;
const int StringMessage::kBodyFieldNumber;
#endif  // !_MSC_VER

StringMessage::StringMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:StringMessage)
}

void StringMessage::InitAsDefaultInstance() {
  header_ = const_cast< ::Header*>(&::Header::default_instance());
}

StringMessage::StringMessage(const StringMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:StringMessage)
}

void StringMessage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  header_ = NULL;
  body_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMessage::~StringMessage() {
  // @@protoc_insertion_point(destructor:StringMessage)
  SharedDtor();
}

void StringMessage::SharedDtor() {
  body_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete header_;
  }
}

void StringMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMessage_descriptor_;
}

const StringMessage& StringMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_kite_5fremoting_2eproto();
  return *default_instance_;
}

StringMessage* StringMessage::default_instance_ = NULL;

StringMessage* StringMessage::New(::google::protobuf::Arena* arena) const {
  StringMessage* n = new StringMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StringMessage::Clear() {
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      if (header_ != NULL) header_->::Header::Clear();
    }
    if (has_body()) {
      body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StringMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:StringMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .Header header = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_body;
        break;
      }

      // required string body = 2;
      case 2: {
        if (tag == 18) {
         parse_body:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_body()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->body().data(), this->body().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "StringMessage.body");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:StringMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:StringMessage)
  return false;
#undef DO_
}

void StringMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:StringMessage)
  // required .Header header = 1;
  if (has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->header_, output);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StringMessage.body");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->body(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:StringMessage)
}

::google::protobuf::uint8* StringMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:StringMessage)
  // required .Header header = 1;
  if (has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->header_, target);
  }

  // required string body = 2;
  if (has_body()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->body().data(), this->body().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "StringMessage.body");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->body(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StringMessage)
  return target;
}

int StringMessage::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_header()) {
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  if (has_body()) {
    // required string body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());
  }

  return total_size;
}
int StringMessage::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required .Header header = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);

    // required string body = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringMessage::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const StringMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StringMessage>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringMessage::MergeFrom(const StringMessage& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_header()) {
      mutable_header()->::Header::MergeFrom(from.header());
    }
    if (from.has_body()) {
      set_has_body();
      body_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.body_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StringMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMessage::CopyFrom(const StringMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_header()) {
    if (!this->header_->IsInitialized()) return false;
  }
  return true;
}

void StringMessage::Swap(StringMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StringMessage::InternalSwap(StringMessage* other) {
  std::swap(header_, other->header_);
  body_.Swap(&other->body_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StringMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringMessage_descriptor_;
  metadata.reflection = StringMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StringMessage

// required .Header header = 1;
bool StringMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StringMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void StringMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void StringMessage::clear_header() {
  if (header_ != NULL) header_->::Header::Clear();
  clear_has_header();
}
const ::Header& StringMessage::header() const {
  // @@protoc_insertion_point(field_get:StringMessage.header)
  return header_ != NULL ? *header_ : *default_instance_->header_;
}
::Header* StringMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::Header;
  }
  // @@protoc_insertion_point(field_mutable:StringMessage.header)
  return header_;
}
::Header* StringMessage::release_header() {
  clear_has_header();
  ::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void StringMessage::set_allocated_header(::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:StringMessage.header)
}

// required string body = 2;
bool StringMessage::has_body() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void StringMessage::set_has_body() {
  _has_bits_[0] |= 0x00000002u;
}
void StringMessage::clear_has_body() {
  _has_bits_[0] &= ~0x00000002u;
}
void StringMessage::clear_body() {
  body_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_body();
}
 const ::std::string& StringMessage::body() const {
  // @@protoc_insertion_point(field_get:StringMessage.body)
  return body_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMessage::set_body(const ::std::string& value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:StringMessage.body)
}
 void StringMessage::set_body(const char* value) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:StringMessage.body)
}
 void StringMessage::set_body(const char* value, size_t size) {
  set_has_body();
  body_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:StringMessage.body)
}
 ::std::string* StringMessage::mutable_body() {
  set_has_body();
  // @@protoc_insertion_point(field_mutable:StringMessage.body)
  return body_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* StringMessage::release_body() {
  clear_has_body();
  return body_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void StringMessage::set_allocated_body(::std::string* body) {
  if (body != NULL) {
    set_has_body();
  } else {
    clear_has_body();
  }
  body_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), body);
  // @@protoc_insertion_point(field_set_allocated:StringMessage.body)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
